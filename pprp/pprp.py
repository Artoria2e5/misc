#!/usr/bin/env python3
# /// script
# dependencies = [
#   "gmpy2",
# ]
# ///
from gmpy2 import mpz, xmpz, powmod, invert, c_divmod, mp_limbsize
import math

BITS_PER_LIMB = mp_limbsize()
# Does not improve speed much
SHRINK_T_FOR_D = False
# Helps when testing with small p
SHRINK_T_FOR_P = False


def prp_mp(p: int) -> mpz:
    mp = (mpz(1) << p) - 1
    x = xmpz(powmod(3, mp + 1, mp))
    x *= invert(9, mp)
    return x % mp


PPRP_T: int = 2046
PPRP_TWOT = mpz(1) << PPRP_T


def pprp_mp_d(p: int, d, res_mod_2tp2) -> bool:
    # is M_p/d composite? Given res_mod_2tp2 = pow(3, mp-1, mp) % 2^(t+2)
    # (t+2) because I don't think we can safely get pow(3, mp-1, mp) % 2^t back otherwise? idk
    d = mpz(d)
    res_mod_2tp2 = mpz(res_mod_2tp2)
    mp = (mpz(1) << p) - 1
    t = PPRP_T
    twot = PPRP_TWOT
    t_changed = False

    if SHRINK_T_FOR_P and p <= t:
        print("Adjusting t for p > t")
        t = p - 1
        twot = mpz(1) << t
        t_changed = True

    if d < 1 or d >= mp:
        raise ValueError("d must be in the range 0 < d < 2^p - 1")

    if SHRINK_T_FOR_D:
        log2d = d.bit_length()
        if t > log2d + BITS_PER_LIMB:
            print("Adjusting t to just fit d")
            t = math.ceil((log2d + BITS_PER_LIMB) / BITS_PER_LIMB) * BITS_PER_LIMB
            t_changed = True

    if t_changed:
        twot = mpz(1) << t
        res_mod_2tp2 %= mpz(1) << (t + 2)

    if d >= twot:
        raise ValueError("d must be less than 2^t")

    res_mod_twot = res_mod_2tp2 * 3 % twot

    mp_d, rem = c_divmod(mp, d)

    if rem != 0:
        raise ValueError("d must divide 2^p - 1")

    s = powmod(3, d, mp_d) % twot
    # All three possibilities
    w0 = d * (s - res_mod_twot) % twot
    w1 = d * (s - res_mod_twot - 1) % twot
    w2 = d * (s - res_mod_twot - 2) % twot
    return w0 >= d and w1 >= d and w2 >= d


def parse_res2048(res_str: str) -> mpz:
    res_str = res_str.replace(" ", "")
    if len(res_str) != 512:
        raise ValueError("res_str must be a 512-character hexadecimal string")
    return mpz(res_str, 16)


import sys


def main(argv: [str]):
    from functools import reduce

    if len(argv) < 3:
        print("Usage: python pprp.py <p> <d> [res2048]")
        sys.exit(1)
    p = int(argv[1])
    d = reduce(lambda a, b: a * b, [mpz(x) for x in argv[2].split(",")], mpz(1))
    res2048 = (
        parse_res2048(argv[3]) if len(argv) > 3 else (prp_mp(p) % (mpz(1) << 2048))
    )
    if pprp_mp_d(p, d, res2048):
        print("M%d/%d is definitely composite" % (p, d))
    else:
        print("M%d/%d could be a pPRP..." % (p, d))


# Also: 97 11447 (False), 131 263 (True)
# All of these are known prp
TEST_CASES = """\
2351
4703,1357402684751110526455958656804092877758955940025791,1705752023090566268114129569577822571051003489941200079
3387EA6A0AF729D1EBA47F78E953881A0BB0BEA3AC93D422156072C4D653F546936C7FED49A05E366F9551EF52134E565891799DEBB7C726E75AA48394DBDF2D7102E4D8292CDAB7F26F9933A74444F48E85DD3F3D99CC17F97876B23192C56A6D397B16B65B82D8579299291C8AB2B3E976FA73DA75C5E306419C2E4A36B852D28BD5F0DB6035262A1ECDE5748861720464F7D0A6BDE4CD9891943B7953CAD722D940EF72C634741FE68ADA8AAB0A8295573B31208531E25CA2EB071275A36174FF3C53CC07C4DD5296F721C71B8C3496FDC7993ADDD736C07C3D75EF6D11D49CA5860C98915C7FEFDCE4590089441FCD3B43898B8E955BFB56B4A9A31A928F

3307
10609622676254977,2034656323703532334145890988609,3413215452475967590824666626325289455333796024133147903
7BB3D46A867B27C51DEEB1AC868CE16CEE66B9FFBFA54A369C1972A0CF000F3976394A64F4E042C3E443449E0260CFC25DF33718D5F72924C4199B6CC66E5D8CAF0EE249DF6828218222E1F44E6064F4F4C0C0502777D25D435EFF141FC87D67E33A000369E7017C5FD1CEC8BABB1CA4F809B2564422608B48A405F7A6DCD27F5A9BD7A2C109D2602C210BDBA5E4420827022DEB93DF34B8F2C6F6D49112DD23656160227515DD7583A0E262C81550049E4E7599D3B148CAF8DF91D4798CF1F3388E0D2D6FCFA02E293BECA6A6A91F5DB07F22CFE8C5C66263D7CD93C90CB25331C9EDEC9C8F5B3040D6A930B0715FC308E0BA8673B3B168D1E0C327808676C3

3917
407369,4606265160215972929759,7679006328488924222315414775660346920454928754786531976636337
E68F18F55D1EDF6A6FC2D6694A2B98B97F3286301BAE57488CB7EE53D84C1CCAD5947573A0741AF0EEBEEDF505269478177111D63584C82CD9D953D6A489817F23181CDC1DEE5E284929B75E604995591EA0C24A6110E05FF6CED1A362B5FDC945B8ED47CB551744B5E428162195D2DDFEC835D80F9E1DD812BAAF0946997BEDD29B09F94819AD2203CD9B5A17BCDDAE32FB65D691F6C929CDBF75240AF6E3D3AA97098B67098F1A0DC555D0EC3CB965A18A14E728B47C51CE84026C313F339748211E59730C2F5DF8AA31172FD696E76FDC39F94BAB19501A3AF6C1E5F71FAB06FCE2CB8E26BFC73853F4EE476A2616282F500A1F13C8F8D96E50908E297410

4021
10800407,2192551772209,2889358374295985266660480623679,1805978952876778448258839710221983,875519176360539839897100230260113413330762825204981857242045041249
611110787575CFFBDE0AAE1AD341549787F6C98B7D5EE2DC2FCB7381DB1C7C0EDAA6B92F94A89A700B9BEF5C69886496B650AD8D1688390CF4B9B4CD86E1E55524F654A949A27FB74A03F91A14AFC5E94F34D9C6A7CB23239716E35DC61D4CCD0A2B81F40F42C85037D82260C294B6856236C5AF5A979BA0C68CE15CC538563B2BA4495336D5F1BD1AE895B9EB777B52BA754D64E75CDF9E3AFB88E1B51DEDBD1CB860C863542C2D84E92B31BE1FE9B31EBFF8DE8EC2FA2ABD5D31CC95F8DDD05AAC965877AAC7B00790B91FC74CA5457886986538C366ED73E8584A7BE140F8E2E01D815294453F159DB6412FC4DDB7056DF7D58E24A709C46519742CF0F34C

4349
12100966474679,183495251103546507760826263409,35797232484163710163467490373510908687,47571370031120172757491816499652518228991
BDC1F2B74B38EE1634AC8B6662DB6A706234DE26275B6F998058AF2BFCAF6742E9BCCAB088D36F020321C0E26A4F3E37537AB76C82E96954901B3613F3BD5D752F26EDD18B67022D5CE8F50C8452A36B35A57C00078247D0AF56064E2B1078E7599B10E2A139D7F33F58FC162E260A5FED59846D700BACFAA4D43419794900EDC053F72A6E2F8AF8F5AADFFC4EE400FE0E31714BEE9F765BE58518537E93A7D34429E4549EF61296D8062CDA2CE0521D60E19AD4A4FC0ACB7BE12500B9A1828F8D87BB98F1CAEA8887905DEB26265C64F73ED63CBEF020CD30CEF450240977497C26FC89CBF4DC8E981E44CE130A90A154EC7526C6F1FA6102CF866B94ADDE54

4507
21381209,16017884955731529552690275607179591643953137468818001
6E054DA5B3A5BAC56622B441BD90DA4DDFE8753D39405B8572500AFE5C8C143DCF443AAB043B47B49C2D37B4B8B5F80417B380EA253B9842B3679EB0D08A089AB0BE77D6BB903B0194862FE8DBE7D75D326854CC75087C9EA498AFB9406C00D0271F690AA2D2909596684B6AFFBD14634B64A4EE85D83144C9D9C9F66ED16CC4EAA3E611312304C9A24DBCD7A75E302403CF634B1B2E0B76A2D82C8095C6AA99FC68F78FFBC5F984CC628F581703B21480CC7F2A1AFF4D7CDDF014BD27FDFD49DFEC13766983EB1E240C9B672E6B3ED9892D59C9FBE5BEDF6EDD749D0D14DB96EC0DB315E18C7099FCEB26D25E9D8A363EA5B79CD430F09F8475381DEC6A58BA

5393
32359,452520080981489534263028760815303458503939967511962417,1270133764632902720778602923087552962031274925622407641153
E8C96E9631529BCF29DBA0CABDAFC2FD6A79AA0DB1698EF511FA1FCDE6F6FC56435DACC65C815AA3B4F4B0F6C0A8E0ADCB7560467FA231CA6EA349EB87383AB038C7F12170EFDA8D6B7F8CC6A2A295DC486660D270C88B155B0BFA5A44F0C1FED23F13E847D3DC99582C3826B9C74DD10F35AF85D2ECF43D1C213BEA9ACB91960EF381CD3FE1AB8882C8FD2A457C6A5373F2638DB523C2B3EE942EF1B42AF4AF076F806FFB750B7BA5FE3CAEDFCBB854D206FFF6F427A75BF3FB3F7676265C6D66C75481B8A1CE4953DB71ECF348E5B029CCBEBFAC92A7AF7A1A602E47E9A1F49A74FDE01B357D565DB5CB8EEAE50E47A0A9F022D5AFA0FAD8D8D893FE977173

5657
218122607,32179383361340500358185120201931380024862810031660053165689
75CA3DE8EA9F7D0894D88B4D7F375F5561AB57F503DF5F7E5FFB39A272C001CC4623BEF423F00579847114D54934F7178A26DD5AB92279C9CDD55537E1148B1DA7AF1F9748F131472669065E9EBC21C07CDF2660C186D76C57AC3100E384CBEE3DE99FD45985B4D33A5C4F0EA59121CA6CF6D210AB4B455177312DEFBE58A00791A53C065DB69063960FF52862851FD0D1B359BEFDE2F9287453D9E673A4E989AFB8732739225688B3DEF31F67B9C6410806D8438DE79D17C85A6A205AB5F83D3E87507C1EE48A8A9B2FCFDDDBCF4E9BC87509154AA86EA009A6B505D51C0A3FB809E1C04EA350C85DE3E36002609699A9493F24FBF6E992EE2D3A5945630D5B

7013
54547899457,1446087342943764981983,1462102413595350700488992078837779280887,1932091091898893820676219206120678104833,1138366928030375456183260866527655539096399389159
8D4D19E79937E6C9A520873172A1DA096E437C6717AC15B8990844CB35B5CCAC3CCB3958A0E58430428F83CE8AD4D9FB0A822D2A42B71BAF60F1B0B444A225169152B3FD8328BC2BB357CD950A9BA39460D2B449E9CEBFF1998BCAE00A5169F72ED9E77A201D96CEB0DA1EDFA5158C4A280E3A2BD40B5A1F16E44B7558E850CD3794BECE5934F93BEADDF528FF711F6850D42DB514FF0B1E67F8C7EA16ADF53393FFABEB7EE2DABB269DA194DD739749A8DCF60536109C0C54AA4F934E0B1CEA80A0D97B098EF56263E7537D246E1700A0DE81838C14D53DD80D594D1C3AAD44168F41280415862C2EF3373A5A1451DEB4ECD02F39DBC6F147FB120F403C6BBF

7669
131093887,40807239817,90406606411269877183013315812904972636799709663
0D2766EA91A96D616A95A6FC55B69C4F35F438E5C8C577ADD06EF5C6C8846BE856BBD10EDA7162DEAEA25B860F4FA95A2DD05D745FF1EE436A22B236F6973F8783C7C6F746BBAD76A780A5C32406A6395EF554E658607470B13129A15A23857DF3B1A0C572ECB07ADEA04E29CAB1F538794151D8859D7AEBE3219447223D8D311D999942D5FA6EBB6D041E1AFBA79D290FE4D0F19D5C6E48CB10E9503C8CD30DAD7BF5F13F2B2276E3FB99C79141BFC79F69FCFB7CF244158F256ED4C77BAA2E407CE57A3786FB5CD0B7DBD18BCD687671A97D2BD122E37CB07126D695B064BB383EBCE8498B957BFAA1FC965E8BB0399E68F1227A22F8089AFF9B781FB9B5A9

8167
3136129,76835137,22373884596376117958605259425009235075637889948561
0DA2202E79E3B38D43EC3CADC22AD845B18D569F1B66E1483684B49E8DDC142D8F8D10C00C5370E998B31CA5D48EB1F3CCF6D9B620C653EDBDCDE6A2A1519CB6395EAE3422F3C5EDFC81F7C5EDBFB6FD5DB0F0636E626A8ABE9D71CA4778154C28B576CEDF97EDF1F4A78FAA84FF270659EF50077D24ECDC468AC7CCFBC6FB601E76347723A932F230BF3ABC3E996BFA9E3911D2E5819E2115AC45F27ACA65699E87C99FC43C45364AC6DEC707289A1F33700077FE57038B025997EFB9521553407F09D260E49FE49A685D551232F023F0BF8034CC7F239E7FFC875708D2779C7E4FE6FB60AFCD93E0566A42A914740B736F5FC13A7BA109DE3DED4E3F586763

8233
195611422708913289323830429299939553967,20866399143857514113654051017725144974702596369
133FF942087B0BEFF411E61FBEFC60F83C890AA85CA0AA80935229417921F7910D2DFC2E56ACAB5EEF4574514E80C0F535B8FF63CD4E9503064F2781C91397C2244505085C75A0DCF709D2C2C9FBD1F1167899361BE747E74BEA8C7FA0060CFD94D6106D210522293B6FB4A970BBBED1F5F7C583FA08EB4E55C814A27663D8231B90C6A999951F02E10D8F4705C8EA0DD0BC90020405C5AEFF4BA79C5838878932FD6DE960F6A67889F10C41D02FDF8ACC19507063E839525C51C90C8AC61DADD33266582B07E8B0EF6E7A7FA5AEF2E762A6A32739C5053DEA205CA4555D2CEE8CB4296BBBFAE9CBB5FE4D79EAB1B6615028436BE656208EEADECF918F498325

8443
16904083774639,48900329102446116896134380511312795947709269991
35AA3BA732881D97B8D0E223357F0518A84CBB08CE03FA9614C4A09B1AF3C3F30AA2D7974CE95F4B331DCAA723DFCB2AE43D077EEC7F2D0A94184E3964ECE0DAE9924E5A86C8A92278CB372C23354CA35338EB824762E534D42E7F4DAEFEC9807162E39B67DBC474804FE42AF3FBD73CCAB07D4CBEC075C4927A5C10D6CEFBCE7D4C86BB31AABDC9072DE4AB49331B04626A63C8998BF1EFE3EA2075452B1FD5BB54F599238377548FE60B19864F5C66329621849F5B534D31845D2FFD456485A5398B52A7DDAD26BC93EC42C707CE649928E7FA98F61E64D55BC182C990DB86A4EAE3F3E4CBB5B6CC84488031CAF30A7A76D72A5EF17ABC7489392AB01C40A6

16007
607753777,1343045178876169734289,60402162135872990942121668113583277113
D9BCA855A8EA9F17497F715457B2A3F043FF9A1E8297D5DF76525F0EDEF118EC850EC0DFFACFE71230CCA1114955A9EC9BBD3E1F81C54567C5E560737B6A5283E59B1C8A57036B545F5B32385F9ED68D11CD0E3307710B32F71268E67F26292B9924956917C21C1B1C24FD0FE91F009EDFB130718EDEB12B59AF0597A5A8B6534A3FD06284341BD1BCA9097B3E4057C115349356BC2E4A2138DCECAD36D446532B5D6169973978DA8B614565DA7603AE69AE3D93300A75EA1A6D788882D3CB7A5D22E86ECDCF125FBB9524B544CD889887AD0A3A67A1C35266657993FA46699E3B89DE122A2E62CC2B889372CE767C07488C1F0D9B20E52B19E13EBA9FC74BA5

20963
41927,4066823,3294249753257,144880925797145026334768356934387571710607277129
5157C5FBF824A09D6975A5975645C6C5AC589E9A8FD07B06B14E4DD99A35AE84F96FFA8548F1EA3002BECC9CD7BCEF702434FD6815D576750FF491D72A722BA15AE6CBC4D4A112E85097B0EF815AE33E9C606754E88D3BD9277E086CAF293591B95F065C2F4929BCEC23E219539D9E316866C9F1F8B5EDDD02A346D6558333C7F3F488A571422FCDC943047CCC5B62342FE503E0EE70E5F9D5ACEB3FD7563402B17EFE767473FF03EEBC23CFE4FAD4EAB9781756007DBB0949613F451D336CCE21E5C2435B13C2DC7ED7C6C0AE5F41FE6569FFFCBDF310F323EFC64ED049F0ABBC4E650C1ABA7AD691165D6C8510AEBA1E1F73882E2C59318233359840BB6450

24977
2397793,39208928379294433,210673129668071675681953,17983519129027476244911858668349653883791
7F815EAFA26A502FB855CB9D8FACD2A8ABF29593F5197645A023120F15BE5417CB1F824C1B49C52F883BD805C20B9FB83A5CCF537AAB1582797DB014ABA644BD2B54AAE003F563E8D9DD34A661E16E7A308B2A34B86932C78C5C607CB4030923BF1DEA0FDBCE1305081AC4BAA2C1490114BE85DF8D610C060E240B9F536B25EF59B3D442F5DA14021B4A9E819AC4210A9A1D531E447F5E82796181779CFE0E3373BF918FFF996C5F24949FF06C76002C9305CBB3AC294D5D9B406FB189E581A3AB7E7E820D6077DD0E7888DDB2A5CA73301C35E3130DB026733A19B5DB522B6F50BAECB01CCA0B828E6697CBED59EFB91AD6CD3D153EF993613004CE2129D4F1

26161
799316864241060167695177,19264214382294611422373763227087,4025405672384900026134363380066358757116191
7446D3F1D71664DEA686A95897C1A9258423C13DC426B35FF0735BA01B2955F5E13FB7B05F0C73D5DA9AEB02F3221A7746DD26E7D3272B406A7EB7431F46C928CC9F309A0195D771D161ADD91D3918F88D88BD89A45BD11EC2EBE2A1CE252C8DCA22A169B47BFBF62038573D19041189CFDC78F8F0431DF730668353C9F301788F415C6F7DA1DED5A3373F4541954BCBF70DAD92FFEC9E05AC0ECF95E60571992FDA061D019357BA3BA8E2B225843AD26CEE0630BF499EDFA9ECCA4ABFB52F4EE64B233FC33069184FE186E059A72ADFB4E9DE8909C0767B8898326A7F7B8DBF10CE27B14874EC99AA7706A45FDA25A3623A18CC97C5442C6538379CE95CE365

64381
50270784325700713,1412688117349577441,257013592408510602566503077077026034209
1187DF436FB86CADA5FBA7364486FBFD4AEB60AA0CF0D01DC868243D01DE0E5FE6C9B21449E0316EAA252E77FE4A02E922B69F7A8D0EFCF7028C2D12546C27B94AAC9FE6C05A85336DDCE240745B5E1BC0FDF7490F44D497412BEB9B379D0072FF2D8F3C9B7CDBF20E7B4AF51A9D9DF28F50813CDF216E6D822DCA5ABF426D69C1866940B4E43DDDB34BC49C7BE90D514505D425984A7ACB94FCDB7E3CAFDE547E67451D335B373499AE46B3C207460D3F2DF3B68580AF568F2075E95E9F18E8B5B53702A10D3D1DABC4F75233DA5B3AF2478278E0AA09AAFDB4D395A83D894AFE796604482C4F9C8F96C0C0A0CCFD4F35C8BFC7498E3531A0672077F56C500F

105269
308568703561,44450301591671,36340288035156065237111970871,304727251426107823036749303510161
E1A2484D92E95E5420FABB19C9FEBEA60151623B7A9C616365678E115F383C32EA57C81A2F5EE9B29460F347008C41BACE403E2319EE80FCFF8F250C8074A87DE5B8AEA767B7FE8B90B80ECD164694DF4306E87A7631C921F13E9755B79E334B9C32F65E16CC021C787676319D9153235FD95C5377846FC0A9A0DEBEE97C217736FD4E63540D1C9CA77E74933032334B59906F739FD1D16F8558CB25C87890CB7373DDC1176C72E80A20A0C8BB3AFF9670DDBF662CC7420DED9B8804072D381925E09919952EDF16908C40BEC0F7ADB3B2058BB8E46B80BEFBCD878128F3B9E9CF44FDF7413AE569089CA204AAE4B9891E0AC6CD402E3DCBD85190A4CE464B95

8247949
10623358313,23839855293703,179607668296296461174489
FBCD7B7401FFCF6860F1BFF2FDC9D651D83298DF64A489ABF912F920B748CAFE6157B7310F00201CC07A9A63919C1FF2028F35D3425359B37003FFBE607D0A3395ACD31F29D4FAF1388911972D5FDFCFBE0895ECFFBE4C216C3421D00ACBE2E1B486568AEB6FFD3DA8AC280CAAA779A792AF70A4F072BB3D69E2C59B396EE7A8423F3EFEA36DE607EDA03B886E237FCA2A693F6E4D111B442469AFA14387A9C68B5D8D0D8EE7B8833D588D022B8D2832BA14BC56BA092D51E4F9FDDC9D895AEF45AB275142E05BAC5583DF04C01FBFAEB6E8E03BCAAEA99E848227D86E1CA027C6503334C443593396D064FB03ECC49A27B32D53887607FC5DA866DED3460939""".split(
    "\n\n"
)


def test():
    for i in TEST_CASES:
        args = i.split("\n")
        main(["test"] + args)


from itertools import takewhile, islice
from collections import deque
from functools import cache


def consume(iterator, n=None):
    if n is None:
        deque(iterator, maxlen=0)
    else:
        next(islice(iterator, n, n), None)


# Sieve of Eratosthenes
# David Eppstein, UC Irvine, 28 Feb 2002
def gen_primes(maxp):
    D = {}
    q = 2
    while q <= maxp:
        if q not in D:
            yield q
            D[q * q] = [q]
        else:
            for p in D[q]:
                D.setdefault(p + q, []).append(p)
        q += 1


# https://gist.github.com/Ayrx/5884790
def miller_rabin(n):
    n = mpz(n)
    if n == 2:
        return True

    if n % 2 == 0:
        return False

    r = mpz(0)
    s = n - 1
    while s % 2 == 0:
        r += 1
        s //= 2
    for a in [31, 73]:
        x = powmod(a, s, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = powmod(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True


def prpc(maxp):
    # someone told me that pi(512) = 97
    primes = gen_primes(maxp)
    consume(primes, 97)

    for p in primes:
        d = mpz(1)
        mp = (mpz(1) << p) - 1

        for q in range(2 * p + 1, 10000 * p + 1, 2 * p):
            if miller_rabin(q) and powmod(2, p, q) == 1:
                d *= q

        if d > PPRP_TWOT:
            print("Too big divisors")
            continue

        if d > 1 and d < mp:
            res = prp_mp(p)
            res514 = res % (mpz(1) << (PPRP_T + 2))
            res = res514 * 3 % PPRP_TWOT
            mp_d = mp // d
            s = powmod(3, d, mp_d) % PPRP_TWOT
            w0 = d * (s - res) % PPRP_TWOT
            w1 = d * (s - res - 1) % PPRP_TWOT
            w2 = d * (s - res - 2) % PPRP_TWOT
            if w0 < d or w1 < d or w2 < d:
                print(f"Maybe! p={p}, d={d}")


if __name__ == "__main__":
    import sys

    if len(sys.argv) < 2:
        print("Usage: pprp.py <test|prpc>")
        print("Usage: pprp.py <p> <d> [res2048]")
        sys.exit(1)

    if sys.argv[1] == "test":
        test()
    elif sys.argv[1] == "prpc":
        PPRP_T = 512
        PPRP_TWOT = mpz(1) << PPRP_T
        prpc(10000)
    else:
        main(sys.argv)
